** Default keybindings
  https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el
  
** map! macro

#+begin_src
A convenience macro for defining keybinds, powered by `general'.
If evil isn't loaded, evil-specific bindings are ignored.
States
  :n  normal
  :v  visual
  :i  insert
  :e  emacs
  :o  operator
  :m  motion
  :r  replace
  :g  global  (binds the key without evil `current-global-map')
  These can be combined in any order, e.g. :nvi will apply to normal, visual and
  insert mode. The state resets after the following key=>def pair. If states are
  omitted the keybind will be global (no emacs state; this is different from
  evil's Emacs state and will work in the absence of `evil-mode').
Properties
  :leader [...]                   an alias for (:prefix doom-leader-key ...)
  :localleader [...]              bind to localleader; requires a keymap
  :mode [MODE(s)] [...]           inner keybinds are applied to major MODE(s)
  :map [KEYMAP(s)] [...]          inner keybinds are applied to KEYMAP(S)
  :keymap [KEYMAP(s)] [...]       same as :map
  :prefix [PREFIX] [...]          set keybind prefix for following keys
  :after [FEATURE] [...]          apply keybinds when [FEATURE] loads
  :textobj KEY INNER-FN OUTER-FN  define a text object keybind pair
  :if [CONDITION] [...]
  :when [CONDITION] [...]
  :unless [CONDITION] [...]
  Any of the above properties may be nested, so that they only apply to a
  certain group of keybinds.
Example
  (map! :map magit-mode-map
        :m  \"C-r\" 'do-something           ; C-r in motion state
        :nv \"q\" 'magit-mode-quit-window   ; q in normal+visual states
        \"C-x C-r\" 'a-global-keybind
        :g \"C-x C-r\" 'another-global-keybind  ; same as above
        (:when IS-MAC
         :n \"M-s\" 'some-fn
         :i \"M-o\" (lambda (interactive) (message \"Hi\"))))"
#+end_src
  
** Naming conventions
+ `doom/abc` A public, interactive command, designed to be used via `M-x` or a
  keybinding.
+ `doom:abc` A public evil operator, motion or command.
+ `doom|abc` A public, non-interactive function meant to be used as a hook.
+ `doom*abc` Functions designed to be used as advice for other functions.
+ `abc!` A public Doom "autodef" function or macro. An autodef should always
  be defined, even if its containing module is disabled (i.e. they will not throw a
  void-function error). The purpose of this is to avoid peppering module configs
  with conditionals or `after!` blocks before using their APIs. They should
  noop if their module is disabled, and should be zero-cost in the case their
  module is disabled.

  Autodefs usually serve to configure Doom or a module. [and are usually syntactic sugar]
+ Functions prefixed with `+abc...` belong to a module, e.g.
  `+emacs-lisp|init-hook` is a hook function in the `lang/emacs-lisp` module.
+ `=abc` An interactive command that invokes an app module.

** Spacemacs-like keys
https://github.com/jsmestad/dfiles/blob/master/.doom.d/%2Bbindings.el#L496-L854
